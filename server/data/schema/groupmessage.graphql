# input for creating messages
input CreateMessageInput {
  groupId: Int!
  text: String!
}

# input for creating groups
input CreateGroupInput {
  name: String!
  userIds: [Int!]
}

# input for updating groups
input UpdateGroupInput {
  id: Int!
  name: String
  userIds: [Int!]
}


# ???????????????????????? НУЖНО ЛИ ЭТО??

  # input for relay cursor connections
  input ConnectionInput {
    first: Int
    after: String
    last: Int
    before: String
  }

    type MessageConnection {
    edges: [MessageEdge]
    pageInfo: PageInfo!
  }

  type MessageEdge {
    cursor: String!
    node: Message!
  }

  type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
  }

# END OF ?????

# a group chat entity
type Group {
  id: Int! # unique id for the group
  name: String # name of the group
  users: [User]! # users in the group
  messages(messageConnection: ConnectionInput): MessageConnection # messages sent to the group
}

# query for types
type Query {
  # Return a group by its id
  group(id: Int!): Group
}

type Mutation {
  # send a message to a group
  createGroup(group: CreateGroupInput!): Group
  deleteGroup(id: Int!): Group
  leaveGroup(id: Int!): Group # let user leave group
  updateGroup(group: UpdateGroupInput!): Group
}

type Subscription {
  # Subscription fires on every message added
  # for any of the groups with one of these groupIds
  groupAdded(userId: Int): Group
}