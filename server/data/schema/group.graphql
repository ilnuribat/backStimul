type Group {
  id: ID!
  name: String
  users: [User]
  messages(messageConnection: ConnectionInput): MessageConnection
  unreadCount: Int
  status: Int
  assignedTo: ID
  lastMessage: Message
  endDate: String
}

input GroupInput {
  id: ID
  name: String
  userIds: [String]
  status: Int
  assignedTo: ID
  endDate: String
}

input UsersGroupInput {
  id: ID!
  delete: Boolean
  users: [String]!
}

input ConnectionInput {
  first: Int
  after: String
  last: Int
  before: String
}

type Query {
  groups: [Group]
  group(id: ID!): Group
}

type Mutation {
  createGroup(group: GroupInput): Group
  updateGroup(id: ID, group: GroupInput): Boolean
  deleteGroup(id: ID!): Boolean
  updateUsersGroup(group: UsersGroupInput): Boolean
}

type Subscription {
  taskUpdated(id: ID!): Group
}
