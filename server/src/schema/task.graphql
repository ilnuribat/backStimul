type Task {
  id: ID!
  name: String
  users: [User]
  messages(messageConnection: ConnectionInput): MessageConnection
  unreadCount: Int
  status: Int
  assignedTo: User
  lastMessage: Message
  endDate: String
  parentId: ID
  objectId: ID
  files: [File]
}

input TaskInput {
  name: String
  objectId: ID
  parentId: ID
  status: Int
  assignedTo: ID
  endDate: String
}

input UsersTaskInput {
  id: ID!
  delete: Boolean
  users: [String]!
}

input ConnectionInput {
  first: Int
  after: String
  last: Int
  before: String
}

enum UserTaskActionEnum {
  INVITED
  KICKED
}

type UserTaskRole {
  id: ID
  username: String
  email: String
  name: String
  mail: String
  initials: String
}

type UserTaskAction {
  action: UserTaskActionEnum
  user: User
  task: Task
}

type Query {
  task(id: ID!): Task
}

type Mutation {
  createTask(task: TaskInput): Task
  updateTask(id: ID, task: TaskInput): Boolean
  deleteTask(id: ID!): Boolean
  updateUsersTask(task: UsersTaskInput): Boolean
}

type Subscription {
  taskUpdated: Task
  userTaskUpdated: UserTaskAction
}
