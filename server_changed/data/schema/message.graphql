# input for creating messages
input CreateMessageInput {
  groupId: Int!
  text: String!
}

# a message sent from a user to a group
type Message {
  id: Int! # unique id for message
  to: Group! # group message was sent in
  from: User! # user who sent the message
  text: String! # message text
  createdAt: Date! # when message was created
}

# query for types
type Query {
  # Return messages sent by a user via userId
  # Return messages sent to a group via groupId
  messages(groupId: Int, userId: Int): [Message]
}

type Mutation {
  # send a message to a group
  createMessage(message: CreateMessageInput!): Message
}

type Subscription {
  # Subscription fires on every message added
  # for any of the groups with one of these groupIds
  messageAdded(groupIds: [Int]): Message
}